---
layout: post
title:  "Loops"
date:   2014-09-08 03:24:54
categories: update
---


Loops
----------------------

Are a way of doing the same thing, multiple times.

For loop
----------------------

{% highlight javascript %}
//This particular loop will run five times
//Its cool like that
for(var i = 0; i < 5; i++) 
{
	console.log(i);
}
{% endhighlight %}

- For loops have three parts inside their parens
	1. Create a variable (called an **iterand** when used in looping, and often named 'i'), and sets it to a value (usually '0')
	2. A logical test. **The moment the test returns false, the loop halts**
		- This test is run every time before the loop is executed
	3. A statement to run when the loop has completed. (Usually adds one to the **iterand**)

The other half of the loop is the block that comes after it. This is the code that is run for every **iteration** (or loop). In the example above, its everything inside the curly brackets, so we're just outputting to the console what the value of *i* is for that loop.

Some others.

{% highlight javascript %}
//runs seven times
for(var i = 0; i < 7; i++) 
{
	console.log(i);
}

//runs 100 times
for(var i = 0; i < 100; i++) 
{
	console.log(i);
}
{% endhighlight %}


While loop
--------------------------

Is just the logical portion of the for loop.

Here's a while loop, rewritten

{% highlight javascript %}
var i = 0;
while(i < 5) 
{
	console.log(i);
	i++;
}
{% endhighlight %}


Here's a fun one:

{% highlight javascript %}
while(true) 
{
	
}
{% endhighlight %}

The break statement
-----------------------------

Let's say you did what you need to do in a loop, but its still running.

You can **break** out of it.

{% highlight javascript %}
//this loop will only run 5 times
for(var i = 0; i<10; i++) {
	if(i>4) {
		break;
	}
}
{% endhighlight %}


Drawing with loops
--------------------------------

Drawing with loops can be rather fun if you play with the *iterator*.

**Cicles of circles circling circles.**

{% highlight javascript %}
for(var i:number = 0; i < 10; i++) {
	drawing.beginFill(OxFF0000, i/10);
	drawing.drawCircle(200, 200, i* 200);
}
{% endhighlight %}

**staircase**

{% highlight javascript %}
drawing.beginFill(OxFF0000);
for(var i:number = 0; i < 10; i++) {
	drawing.drawCircle(i*20, i*20, 20, 20);
}
{% endhighlight %}

**targeting**

{% highlight javascript %}
drawing.lineStyle(1, 0x000000, 1);
for(var i:number = 0; i < 10; i++) {
	drawing.drawCircle(0, 0, i*20, i*20);
}
{% endhighlight %}


Math.random()
--------------------------------------

The time has come.

Math.random() is a way to get random data into our programs without the need for user input.

It always produces a number between zero and one.


**Scaling to a random number**

If you multiply Math.random() it will produce a number between zero and the number you multiply by.

{% highlight javascript %}
var betweenZeroAndFive:number = Math.random() * 5;
{% endhighlight %}

**Scaling to a random, whole number**

Using Math.round.

(You could also using Math.ceil to always round up, or Math.floor to always round down)

{% highlight javascript %}
var betweenZeroAndFive:number = Math.round(Math.random() * 5);
{% endhighlight %}



Circles.. everywhere
------------------------------------------

A combination of a loop and a scaled Math.random() can get us a nice result wtihout a lot of work.

{% highlight javascript %}
var randX:number;
var randY:number;
var randY:number;

for(var i:number = 0; i < 100; i++) {
	drawing.beginFill(0x00FF00);

	randX = Math.random() * 800;
	randY = Math.random() * 600;
	randR = Math.random() * 80;

	drawing.drawCircle(randX, randY, randR);
}
{% endhighlight %}