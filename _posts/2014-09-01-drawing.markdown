---
layout: post
title:  "Drawing"
date:   2014-09-02 03:24:54
categories: update
---

Drawing using the canvas
-------------------------


Positioning
--------------------------

When working with positioning in computer code, you most often will be working in units of **pixels**. The *upper left corner* of the screen will be pixel [0,0].

*X increases* as you go further right on the screen.

*y increases* as you go further down the screen.

So, if you have a screen that is 800x600 pixels, a point in the middle of it would be [400,300].

Color
-----------------------------

Color, is set using *hexadecimal*. We're not going to go into how to convert the colors manually. Just know that if you want a specific color you will need to look it up, either using photoshop or a tool online.

*Some color examples*

- **Red:** #FF0000
- **Green:** #00FF00
- **Blue:** #0000FF
- **White:** #FFFFFF
- **Black:** #000000

Drawing
------------------------------

**Setup code**

Really at this point you should just copy and paste and gloss over the details of this particular code section.

First, in your HTML, add this tag:
{% highlight html %}
<canvas id="myCanvas" width="800" height="600"></canvas>
{% endhighlight %}


Then, in your javascript, get a drawing context by adding these two lines. Yes, capitalization is important.
{% highlight javascript %}
var canvas = document.getElementById("myCanvas");
var ctx = canvas.getContext("2d");
{% endhighlight %}

(All of your drawing code will be done with the *drawing* variable there, so make sure its spelling correctly)


Filling
---------------------------

Before we get to making our first mark, it might help to learn how to change the color of what we'll be drawing. This is done with **beginFill**

{% highlight javascript %}
ctx.fillStyle = "#00FF00"; //begins a green fill

ctx.fillStyle = "#FF0000"; //begins a red fill

ctx.fillStyle = "#0000FF"; //begins a blue fill
{% endhighlight %}

This will change the color of **any drawing we do after we begin a fill**

Stroke color
---------------------------------

Sometimes you will only want to draw the outline of the shape. That is done with the stroke. Here is how you change a stroke color.

{% highlight javascript %}
ctx.strokeStyle = "#00FF00"; //begins a green stroke

ctx.strokeStyle = "#FF0000"; //begins a red stroke

ctx.strokeStyle = "#0000FF"; //begins a blue stroke
{% endhighlight %}


Stroke width
-------------------------------

{% highlight javascript %}
ctx.lineWidth = 3;
ctx.lineWidth = 2;
{% endhighlight %}

Drawing a rectangle
-------------------------------

Rectangles take four arguments to their method call. Here's the prototype:

{% highlight javascript %}
ctx.fillRect(topX, topY, width, height);
{% endhighlight %}

So, here's a fairly long and thin rectangle that starts in the upper left corner of the screen.

{% highlight javascript %}
ctx.fillStyle = '#000000'; //black because nighttime rectangles are scary
ctx.fillRect(10, 10, 400, 40);
{% endhighlight %}

In case you want to draw just the outline, we replace the `fillRect` call with a `strokeRect`

{% highlight javascript %}
ctx.strokeStyle = '#FFFF00';
ctx.strokeRect(0, 0, 150, 100);
{% endhighlight %}

Drawing lines
-----------------------------------

Lines are a bit different than shapes (of course!)

Imagine drawing a line as such: you have a pencil on the paper, and you can do either two things:

1. Keep the pencil on the paper and draw to another position
2. Pick the pencil up and draw to another position

This is how drawing lines works. (Note your 'digital pencil' always starts in the upper lefthand corner).

{% highlight javascript %}
ctx.strokeStyle = '#FFFF00';
ctx.beginPath();
ctx.moveTo(200, 0); //does not draw, but the next 'lineTo' will start at 200,0
						// Your lines always need to start with a 'moveTo'
ctx.lineTo(200,100); //draws a line straight down from 200,0
{% endhighlight %}

Drawing a circle
---------------------------

Circles, while cool, are a bit complex with the basic canvas. We'll make them a bit easier soon, but for now let's look at the basic code to get them onto the screen.

Here's the basics of a circle:

{% highlight javascript %}
ctx.beginPath();
ctx.arc(xPosition, xPosition, radius, 0, Math.PI * 2);
ctx.closePath();
ctx.fill();
{% endhighlight %}

So, if we wanted a fairly large, blue circle around the center of an average screen size, we migh write some code like this:

{% highlight javascript %}
ctx.fillStyle = "#0000FF"; 
ctx.beginPath();
ctx.arc(400, 300, 200, 0, Math.PI * 2);
ctx.closePath();
ctx.fill();
{% endhighlight %}

Let's draw two circles of different colors:

{% highlight javascript %}
ctx.fillStyle = "#0000FF"; 
ctx.beginPath();
ctx.arc(400, 300, 200, 0, Math.PI * 2);
ctx.closePath();
ctx.fill();

ctx.fillStyle = "#FF00FF"; 
ctx.beginPath();
ctx.arc(100, 400, 50, 0, Math.PI * 2);
ctx.closePath();
ctx.fill();
{% endhighlight %}

Clearing the canvas
-----------------------------------

{% highlight javascript %}
ctx.clearRect(0, 0, canvas.width, canvas.height);
{% endhighlight %}